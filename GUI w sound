/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 */

package com.mycompany.lagoonrental;

/**
 *
 * @author ebrown2025
 */


import java.awt.EventQueue;
import javax.swing.*;
import java.awt.Color;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.sound.sampled.*;
import java.io.*;
import java.util.Date;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
public class Lagoonrental implements ActionListener {
    private JFrame frame;
    private JTextField textField_Quantity;
    private JTextField textField_Duration;
    private JTextField textField_Date;
    private JComboBox<String> comboBox_Item;
    private JTextArea taResult;
    private JButton btnSubmit;
    
    private static final double VEHICLE_RATE = 50.0;
    private static final double PADDLE_BOARD_RATE = 20.0;
    private static final double KAYAK_RATE = 25.0;
    
    public static void main(String[] args) {
        EventQueue.invokeLater(() -> {
            try {
                Lagoonrental window = new Lagoonrental();
                window.frame.setVisible(true);
            } catch (Exception e) {
                e.printStackTrace();
            }
        });
    }

    public Lagoonrental() {
        initialize();
        
    }

    private void initialize() {
        frame = new JFrame();
        frame.setBounds(100, 100, 500, 400);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.getContentPane().setLayout(null);
        frame.getContentPane().setBackground(Color.LIGHT_GRAY);
        //creates textboxes
        
        JLabel lblItem = new JLabel("Select Rental Item:");
        lblItem.setBounds(30, 30, 150, 20);
        frame.getContentPane().add(lblItem);
        
        comboBox_Item = new JComboBox<>(new String[]{"Jet Ski", "Paddle Board", "Kayak"});
        comboBox_Item.setBounds(180, 30, 150, 20);
        frame.getContentPane().add(comboBox_Item);
        //establishes the establishes the possible renting options
        
        JLabel lblQuantity = new JLabel("Number of Rentals:");
        lblQuantity.setBounds(30, 70, 150, 20);
        frame.getContentPane().add(lblQuantity);
        
        textField_Quantity = new JTextField();
        textField_Quantity.setBounds(180, 70, 50, 20);
        frame.getContentPane().add(textField_Quantity);
        
        JLabel lblDuration = new JLabel("Rental Duration (hours):");
        lblDuration.setBounds(30, 110, 150, 20);
        frame.getContentPane().add(lblDuration);
        //establishes box for prices
        
        textField_Duration = new JTextField();
        textField_Duration.setBounds(180, 110, 50, 20);
        frame.getContentPane().add(textField_Duration);
        
        JLabel lblDate = new JLabel("Rental Date:");
        lblDate.setBounds(30, 150, 150, 20);
        frame.getContentPane().add(lblDate);
        
        textField_Date = new JTextField();
        textField_Date.setBounds(180, 150, 100, 20);
        frame.getContentPane().add(textField_Date);
        
        btnSubmit = new JButton("Submit");
        btnSubmit.setBounds(180, 190, 100, 25);
        btnSubmit.addActionListener(this);
        frame.getContentPane().add(btnSubmit);
        
        taResult = new JTextArea();
        taResult.setBounds(30, 230, 400, 100);
        frame.getContentPane().add(taResult);
    }
private List<RentalEntry> rentalEntries = new java.util.ArrayList<>();

    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == btnSubmit) {
            calculateRental();
            SoundClass chaching = new SoundClass();
chaching.createTimeForSound();
        }
    }

   private void calculateRental() {
    try {
        String item = (String) comboBox_Item.getSelectedItem();
        int quantity = Integer.parseInt(textField_Quantity.getText());
        int duration = Integer.parseInt(textField_Duration.getText());
        String date = textField_Date.getText();

        double rate = switch (item) {
            case "Jet Ski" -> VEHICLE_RATE;
            case "Paddle Board" -> PADDLE_BOARD_RATE;
            case "Kayak" -> KAYAK_RATE;
            default -> 0.0;
        };

        double totalCost = quantity * duration * rate;

        // Create and store the rental entry
        RentalEntry entry = new RentalEntry(item, quantity, duration, date, totalCost);
        rentalEntries.add(entry);

        // Display all stored entries
        StringBuilder resultText = new StringBuilder("Rental Entries:\n");
        for (RentalEntry re : rentalEntries) {
            resultText.append(re.toString()).append("\n");
        }

        taResult.setText(resultText.toString());
    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(frame, "Please enter valid numeric values for quantity and duration.", "Input Error", JOptionPane.ERROR_MESSAGE);
        //prints invalid response if non number sequence
    }
}

    
}
class SoundClass{
String filePath = "dirty-siren-40635.wav"; // Replace with
public static void playSound(String filePath) {
try {
File soundFile = new File(filePath);
AudioInputStream audioIn =
AudioSystem.getAudioInputStream(soundFile);
Clip clip = AudioSystem.getClip();
clip.open(audioIn);
clip.setFramePosition(0);
System.out.println("Playing the sound");
clip.start();
// Keep the program running until the sound finishes playing
clip.addLineListener(event -> {
if (event.getType() == LineEvent.Type.STOP) {
clip.close();
}
});
} catch (UnsupportedAudioFileException | IOException |
LineUnavailableException e) {
e.printStackTrace();
}
}
public void createTimeForSound() {
TimerTask task = new TimerTask() {
public void run() {
playSound(filePath);
System.out.println("Task performed on: " + new Date() + "n" +
"Thread's name: " + Thread.currentThread().getName());
}
};
Timer timer = new Timer("Timer");
long delay = 1000L;
timer.schedule(task, delay);
}
}

class RentalEntry {
    String item;
    int quantity;
    int duration;
    String date;
    double totalCost;

    public RentalEntry(String item, int quantity, int duration, String date, double totalCost) {
        this.item = item;
        this.quantity = quantity;
        this.duration = duration;
        this.date = date;
        this.totalCost = totalCost;
    }

    @Override
    public String toString() {
        return "Item: " + item + ", Quantity: " + quantity + ", Duration: " + duration + " hours, Date: " + date + ", Total Cost: $" + totalCost;
    }
    //return string
}
